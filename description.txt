                            GeoJSON description :

Le geojson contient :
Type : features
Geometry :
    1. Type : Polygon
    2. Coordinates : [[[]]]
properties :
    1. code : Code du département
    2. nom : Nom du département
    3. cluster : booléen sur ??
    4. id : ?
bounds : [[]]
-------------------------------------------------------------------------------------------------------
                            app.layout and HTML part :

html.H1 : Titre de la page, et par conséquent pour l'instant du jeu

html.Button : Boutton pour commencer le jeu
    - n_clicks : comptabilise le nombre de click total sur ce bouton

html.Div :
    - html.Div : dept_to_found : La ou le département à chercher va apparaitre
    - html.Div : tenta_rest : Compteur des tentatives restantes, par département

dl.Map : Map du monde entier, centrée (sur centre France) et zoomé à 5
    - dl.GeoJSON : Contient les frontières des départements français
        n_clicks : Comptabilise le nombre de clics sur la carte des départements (uniquement)

html.Div : selected_dept : Affiche le département sélectionné

html.Div : assert_dep : Doit afficher si oui ou non on a cliquer sur le bon département
    REFLEXIONS  - En cas d'erreur afficher les informations du département sur lequel on s'est trompé ?
                - QUID en cas de bonne réponse ?
-------------------------------------------------------------------------------------------------------
                            callback and procedures part :

on_click_found_dept() : Pour l'instant que la première partie fonctionne, i.e. celle avec le bouton

dept_click() : Récupère le nom du département sur lequel on à cliquer
    - se fait via la property 'clickData' de dl.Map qui récupère le JSON (complet) du département

recount_tenta() WIP : Doit décrémenter le nombre de tentatives si on ne trouve pas le département
    - dept_to_chose : Département à trouver, générér dans on_click_found_dept()
    - dept_chosen : Récupérer via la property 'clickData' de dl.Map
    - tenta_rest : valeur de la Div tenta_rest (modifiée dans la fonction assert_dept dessous)
        - n_tenta_rest : dernier caractère de tenta_rest, par conséquent le nombre de tentatives restantes
                         sachant que la valeur de tenta_rest de base est 'tentatives restantes : 3'

assezrt_dept() WIP : Doit ET comparer la réponse avec l'attendu ET décrémenter le nombre de tentatives de 1
    - dept_to_chose : idem que dept_to_chose de recount_tenta()
    - dept_chosen : idem que dept_chosen de recount_tenta()
    - n_tenta_rest : Nombre de tentatives restantes, calculé dans la fonction recount_tenta()

-------------------------------------------------------------------------------------------------------
                            A faire et idées :
- Continuer d'implémenter la fonction assert_dept() avec n_tenta_rest et essayer de décrémenter
le nombre de tentatives

- Une fois le nombre de tentative égale à 0, relancer automatiquement un nouveau choix random
de département

- REFLEXIONS sur le dernier html.Div

-------------------------------------------------------------------------------------------------------
                            A supprimer car la pour tests rapides

on_click_found_dept : Code suivant peut être supprimer après
elif trigger_id == 'delete_button':
    print('Triggered delete button')
    return dept, f"{len(dept_list)}"

